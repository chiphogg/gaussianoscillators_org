<div id='randomness'></div>

<script type='text/javascript'>

// Load the Visualization API.
google.load('visualization', '1.0', {'packages': ['corechart']});
// Set a callback to run when the Google Visualization API is loaded.
google.setOnLoadCallback(loaded);

function loaded() {
  // Characteristics of the fake data.
  var pointsPerSection = 10;
  var numSections = 4;
  // When computing the total number of points, remember that the last point of
  // each section is the same as the first point of the next section.
  var totalPoints = (numSections * (pointsPerSection - 1) + 1);

  // The x-values where we have data.
  var x = Sequence(0, 8, totalPoints);
  // Compute the x-values where the piecewise linear model should break.
  var boundaryPoints = Sequence(0, 8, numSections + 1)
  // The changing part of the data will be a Gaussian Oscillator.  So at every
  // timestep, the data will be purely random and independent noise, but the
  // points will move smoothly from timestep to timestep.
  var independenceTimeMs = 5000;
  var frameLengthMs = 250;
  var numTimesteps = Math.round(independenceTimeMs / frameLengthMs);
  var cscOscillator = compactSupportCovarianceOscillator(totalPoints,
                                                         numTimesteps);

  // Construct an object for the fake data.
  var randomData = animatedDataGenerator(x, {
    animatedNoise: cscOscillator
  });

  // Build the models.
  var badModel = disconnectedLinearModel(boundaryPoints);
  badModel.label = 'Disconnected trendlines';
  badModel.id = 'disconnected';
  var goodModel = piecewiseLinearModel(boundaryPoints.slice(1, -1));
  goodModel.label = 'Connected trendlines';
  goodModel.id = 'connected';

  // Build a DataTable to hold all the data (both the random noise, and the
  // models which fit it).
  allData = animatedDataTable(randomData);
  allData.addAndTrainModel(badModel);
  allData.addAndTrainModel(goodModel);

  // It's more robust to refer to a data series by its ID, rather than by the
  // column position which it happens to occupy.
  function seriesNumberWithId(dataTable, id) {
    for (var i = 1; i < dataTable.getNumberOfColumns(); ++i) {
      if (dataTable.getColumnId(i) == id) {
        return i - 1;
      }
    }
    return null;
  }

  // Construct a chart to show all these curves.
  var dataChart = new google.visualization.LineChart(document.getElementById('randomness'));
  var dataChartOptions =
    {
      title: 'Trendlines: connected, vs. not',
      width: 800,
      vAxis: {
        viewWindow: {
          min: -3.0,
          max: 3.0,
        },
      },
      animation: {
        duration: frameLengthMs,
        easing: 'linear',
      },
      height: 500
      series: [],
    };
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'disconnected')] = { color: 'red' };
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'connected')] = { color: 'blue' };
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'y')] = { color: '#888' };

  function update() {
    dataChart.draw(allData.dataTable, dataChartOptions);
    allData.update();
  }
  var listener_id = google.visualization.events.addListener(dataChart, 'animationfinish', update);
  update();
}

</script>
