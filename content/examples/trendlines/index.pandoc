<div id='randomness'></div>

<div id='slopes'></div>

<div id='independentSlopes'></div>

<script type='text/javascript'>

// Load the Visualization API.
google.load('visualization', '1.0', {'packages': ['corechart']});
// Set a callback to run when the Google Visualization API is loaded.
google.setOnLoadCallback(loaded);

function loaded() {
  // Characteristics of the fake data.
  var pointsPerSection = 10;
  var numSections = 4;
  // When computing the total number of points, remember that the last point of
  // each section is the same as the first point of the next section.
  var totalPoints = (numSections * (pointsPerSection - 1) + 1);

  // The x-values where we have data.
  var x = Sequence(0, 8, totalPoints);
  // Compute the x-values where the piecewise linear model should break.
  var boundaryPoints = Sequence(0, 8, numSections + 1)
  // The changing part of the data will be a Gaussian Oscillator.  So at every
  // timestep, the data will be purely random and independent noise, but the
  // points will move smoothly from timestep to timestep.
  var independenceTimeMs = 10000;
  var frameLengthMs = 250;
  var numTimesteps = Math.round(independenceTimeMs / frameLengthMs);
  var cscOscillator = compactSupportCovarianceOscillator(totalPoints,
                                                         numTimesteps);

  // Construct an object for the fake data.
  var randomData = animatedDataGenerator(x, {
    animatedNoise: cscOscillator
  });

  // Compute the slope in the middle of the region between every pair of
  // consecutive breakpoints.
  function slopes(model, parameters, boundaryPoints) {
    var slopeValues = [];
    for (var i = 1; i < boundaryPoints.length; ++i) {
      // Find the boundaries of this region.
      var xMin = boundaryPoints[i - 1];
      var xMax = boundaryPoints[i];
      // Compute points interior to this region.
      var x0 = (2 * xMin + xMax) / 3;
      var x1 = (xMin + 2 * xMax) / 3;
      // Compute the slope.
      var y0 = model.modelPrediction(x0, parameters);
      var y1 = model.modelPrediction(x1, parameters);
      slopeValues.push((y1 - y0) / (x1 - x0));
    }
    return slopeValues;
  }

  // Build the models.
  var badModel = disconnectedLinearModel(boundaryPoints);
  badModel.label = 'Disconnected trendlines';
  badModel.id = 'disconnected';
  var goodModel = piecewiseLinearModel(boundaryPoints.slice(1, -1));
  goodModel.label = 'Connected trendlines';
  goodModel.id = 'connected';

  // Build a DataTable to hold all the data (both the random noise, and the
  // models which fit it).
  allData = animatedDataTable(randomData);
  allData.addAndTrainModel(badModel);
  allData.addAndTrainModel(goodModel);

  // It's more robust to refer to a data series by its ID, rather than by the
  // column position which it happens to occupy.
  function seriesNumberWithId(dataTable, id) {
    for (var i = 1; i < dataTable.getNumberOfColumns(); ++i) {
      if (dataTable.getColumnId(i) == id) {
        return i - 1;
      }
    }
    return null;
  }

  function baseChartOptions() {
    return {
      width: 800,
      vAxis: {
        viewWindow: {
          min: -3.0,
          max: 3.0,
        },
      },
      animation: {
        duration: frameLengthMs,
        easing: 'linear',
        startup: true,
      },
      height: 500
    };
  }

  // Construct a chart to show all these curves.
  var dataChart = new google.visualization.LineChart(document.getElementById('randomness'));
  var dataChartOptions = Object.assign(
      baseChartOptions(),
      {
        title: 'Trendlines: connected, vs. not',
        series: [],
      });
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'disconnected')] = { color: 'red' };
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'connected')] = { color: 'blue' };
  dataChartOptions.series[seriesNumberWithId(allData.dataTable, 'y')] = { color: '#888' };

  // Construct a chart to show the slope of each section.
  var slopeTable = new google.visualization.DataTable()
  slopeTable.addColumn('number', 'region');
  slopeTable.addColumn('number', 'connected');
  slopeTable.addColumn('number', 'disconnected');
  for (var j = 1; j < boundaryPoints.length; ++j) {
    slopeTable.addRow([j, 0, 0]);
  }
  var slopeChart = new google.visualization.ColumnChart(document.getElementById('slopes'));
  var slopeViewWindow = { viewWindow: { min: -1.5, max: 1.5 } };
  var slopeChartOptions = Object.assign(
      baseChartOptions(),
      {
        title: 'Slopes',
        vAxis: slopeViewWindow,
        series: [],
      });
  slopeChartOptions.series[seriesNumberWithId(slopeTable, 'disconnected')] = { color: 'red' };
  slopeChartOptions.series[seriesNumberWithId(slopeTable, 'connected')] = { color: 'blue' };

  independentSlopeTable = new google.visualization.DataTable();
  independentSlopeTable.addColumn('number', 'connected');
  independentSlopeTable.addColumn('number', 'disconnected');
  var independentSlopeChart = new google.visualization.ScatterChart(document.getElementById('independentSlopes'));
  var independentSlopeChartOptions = Object.assign(
      baseChartOptions(),
      {
        title: 'Foo',
        vAxis: slopeViewWindow,
        hAxis: slopeViewWindow,
        animation: { duration: 0 },
        width: 700,
        height: 700,
      });
  var countdownToIndependence = 0;
  var sectionToShow = 0;

  function update() {
    dataChart.draw(allData.dataTable, dataChartOptions);
    slopeChart.draw(slopeTable, slopeChartOptions);
    independentSlopeChart.draw(independentSlopeTable, independentSlopeChartOptions);
    allData.update();
    var y = randomData.currentY();
    var goodSlopes = slopes(goodModel, goodModel.parameters(y), boundaryPoints);
    var badSlopes = slopes(badModel, badModel.parameters(y), boundaryPoints);
    for (var j = 0; j < goodSlopes.length; ++j) {
      slopeTable.setValue(j, 1, 1 * goodSlopes[j]);
      slopeTable.setValue(j, 2, 1 * badSlopes[j]);
    }
    if (countdownToIndependence == 0) {
      countdownToIndependence = numTimesteps;
      independentSlopeTable.addRow([1 * goodSlopes[sectionToShow],
                                    1 * badSlopes[sectionToShow]]);
      sectionToShow = (sectionToShow + 1) % goodSlopes.length;
    }
    --countdownToIndependence;
  }
  var listenerId = google.visualization.events.addListener(dataChart, 'animationfinish', update);
  update();

  toggleAnimation = function() {
    if (listenerId == null) {
      listenerId = google.visualization.events.addListener(dataChart, 'animationfinish', update);
      update();
    } else {
      google.visualization.events.removeListener(listenerId);
      listenerId = null;
    }
  }
}


handleKeyPress = function(e) {
  e = e || window.event;
  switch (String.fromCharCode(e.keyCode)) {
    case 'p':
      toggleAnimation();
      break;
    default:
      return;
  }
}
document.addEventListener("keypress", handleKeyPress, false);

</script>
